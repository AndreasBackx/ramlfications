#! /usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2014 Spotify AB
from __future__ import absolute_import, division, print_function

import json
import logging
import os

import requests as r
import xmltodict

IANA_URL = "http://www.iana.org/assignments/media-types/media-types.xml"


log = logging.getLogger(__name__)
log.setLevel(logging.DEBUG)
console = logging.StreamHandler()
console.setLevel(logging.DEBUG)
msg_format = "%(asctime)s - update_mime_types - %(levelname)s - %(message)s"
formatter = logging.Formatter(msg_format)
console.setFormatter(formatter)

log.addHandler(console)


class MediaTypeError(Exception):
    pass


def get_xml_data():
    try:
        response = r.get(IANA_URL)
    except r.exceptions.RequestException as e:
        msg = "Error getting IANA info: {0}".format(e)
        log.error(msg)
        raise MediaTypeError(msg)

    xml_data = xmltodict.parse(response.text)
    if xml_data is not None or xml_data is not '':
        return xml_data
    else:
        msg = "Error parsing into XML."
        log.error(msg)
        raise MediaTypeError(msg)


def extract_mime_types(registry):
    mime_types = []
    records = registry.get("record", {})
    reg_name = registry.get("@id")
    for rec in records:
        mime = rec.get("file", {}).get("#text")
        if mime:
            mime_types.append(mime)
        else:
            mime = rec.get("name")
            if mime:
                hacked_mime = reg_name + "/" + mime
                mime_types.append(hacked_mime)
    return mime_types


def parse_xml_data(xml_data):
    registries = xml_data.get("registry", {}).get("registry", {})
    if len(registries) is not 9:
        msg = ("Uh oh! a different amount of registries: "
               "{d}".format(len(registries)))
        raise MediaTypeError(msg)
    all_mime_types = []
    for registry in registries:
        mime_types = extract_mime_types(registry)
        all_mime_types.extend(mime_types)

    return all_mime_types


def main():
    log.debug("Getting XML data from IANA")
    xml_data = get_xml_data()
    log.debug("Data received, parsing.")
    mime_types = parse_xml_data(xml_data)

    current_dir = os.path.dirname(os.path.realpath(__file__))
    par_dir = os.path.join(current_dir, os.pardir)
    data_dir = os.path.join(par_dir, "data")

    output_file = os.path.join(data_dir, "supported_mime_types.json")
    with open(output_file, "w") as f:
        json.dump(mime_types, f)

    log.debug("Done!")


if __name__ == "__main__":
    main()
