#%RAML 0.8
title: Spotify Web API Demo
version: v1
protocols: [ HTTPS ]
baseUri: https://{subdomain}.spotify.com/{version}/{communityPath}
baseUriParameters:
  subdomain:
    description: subdomain of API
    default: api
uriParameters:
 communityPath:
   displayName: Community Path
   type: string
   pattern: ^[a-zA-Z0-9][-a-zA-Z0-9]*$
   minLength: 1
mediaType: application/json
documentation:
  - title: Spotify Web API Docs
    content: |
      Welcome to the _Spotify Web API_ demo specification. This is *not* the complete API
      specification, and is meant for testing purposes within this RAML specification.
      For more information about how to use the API, check out [developer
       site](https://developer.spotify.com/web-api/).
schemas:
  - Playlist: !include includes/post-playlist-schema.json
resourceTypes:
  - base:
      uriParameters:
        mediaTypeExtension:
          enum: [ .json ]
          description: Use .json to specify application/json media type.
      get?: &common
        headers:
          Accept:
            description: Is used to set specified media type.
            type: string
        body:
          application/json:
            schema: {"name": "string"}
            example: {"name": "Foo Bar"}
        responses:
          403:
            description: |
              API rate limit exceeded. See http://developer.spotify.com/web-api/#rate-limiting for details.
            headers:
              X-waiting-period:
                description: |
                  The number of seconds to wait before you can attempt to make a request again.
                type: integer
                required: true
                minimum: 1
                maximum: 3600
                example: 34
            body:
              application/json:
                schema: {"name": "string"}
                example: {"name": "Foo Bar"}
      post?: *common
  - collection:
      description: A description of the collection resource type
      post?:
        formParameters:
          ids:
            displayName: IDs
            description: A list of IDs
  - item:
      type: base
      get?:
        protocols: ["HTTP"]
        headers:
          X-another-header:
            description: Another header
  - queryParamType:
      get?:
        queryParameters:
          ids:
            displayName: Some sort of IDs
            type: string
            description: A comma-separated list of IDs
            required: true
  - formParamType:
      post?:
        formParameters:
          aFormParam:
            displayName: Some sort of Form Parameter
            type: string
            description: An uncreative form parameter
            required: true
  - baseUriType:
      get?:
        baseUriParameters:
          subdomain:
            description: subdomain for the baseUriType resource type
            default: fooBar
  - anotherExample:
      description: Another Resource Type example
      usage: Some sort of usage description
      mediaType: text/xml
      get:
        is: [ filterable ]
        securedBy: [ oauth_2_0 ]
  - inheritBaseExample:
      type: base
      usage: Some sort of usage text
      get?:
        displayName: inherited example
        body:
          application/x-www-form-urlencoded:
            formParameters:
              foo:
                displayName: Foo
                description: some foo bar
        responses:
          500:
            description: A 500 response
            headers:
              X-foo-bar:
                description: The foo bar header
                type: string
                required: true
                example: fuuuuuu
  - protocolExampleType:
      protocols: ["HTTP"]
      description: A resource type with a protocol definition
      get?:
        description: dummy method
  - parameterType:
      get:
        queryParameters:
          <<queryParamName>>:
            description: Return <<resourcePathName>> that have their <<queryParamName>> matching the given value
          <<fallbackParamName>>:
            description: If no values match the value given for <<queryParamName>>, use <<fallbackParamName>> instead
securitySchemes:
  - oauth_2_0:
      description: |
          Spotify supports OAuth 2.0 for authenticating all API requests.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            description: |
              Used to send a valid OAuth 2 access token.
            type: string
          X-Foo-Header:
            description: a foo header
            type: string
        responses:
          401:
            description: |
              Bad or expired token. This can happen if the user revoked a token or
              the access token has expired. You should re-authenticate the user.
          403:
            description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired
              timestamp...). Unfortunately, re-authenticating the user won't help here.
      settings:
        authorizationUri: https://accounts.spotify.com/authorize
        accessTokenUri: https://accounts.spotify.com/api/token
        authorizationGrants: [ code, token ]
        scopes:
          - "playlist-read-private"
          - "playlist-modify-public"
          - "playlist-modify-private"
          - "user-library-read"
          - "user-library-modify"
          - "user-read-private"
          - "user-read-email"
  - custom_auth:
      description: custom auth for testing
      type: Custom Auth
      describedBy:
        documentation:
          - title: foo docs
            content: foo content
        mediaType: application/x-www-form-urlencode
        usage: Some usage description
        protocols: [HTTPS]
        queryParameters:
          fooQParam:
            description: A foo Query parameter
            type: string
        uriParameters:
          subDomain:
            description: subdomain of auth
            default: fooauth
        formParameters:
          fooFormParam:
            description: A foo form parameter
            type: string
        body:
          application/x-www-form-urlencoded:
            formParameters:
              anotherFormParam:
                description: another form parameter
      settings:
        foo: bar
traits:
  - filterable:
      usage: Some description about using filterable
      queryParameters:
        fields:
          description: A comma-separated list of fields to filter query
          type: string
          example: tracks.items(added_by.id,track(name,href,album(name,href)))
          displayName: Fields
      headers:
        X-example-header:
          description: An example of a trait header
      body:
        application/json:
          schema: {"name": "string"}
          example: {"name": "example body for trait"}
      responses:
        200:
          description: Yay filterable!
  - paged:
      description: A description of the paged trait
      mediaType: application/xml
      uriParameters:
        limit:
          displayName: Limit
          description: The maximum number of track objects to return
          type: integer
          example: 10
          minimum: 0
          default: 20
          maximum: 50
        offset:
          displayName: Offset
          description: The index of the first track to return
          type: integer
          example: 5
          default: 0
  - formTrait:
      description: A description of a trait with form parameters
      mediaType: application/x-www-form-urlencoded
      formParameters:
        foo:
          displayName: Foo
          description: The Foo Form Field
          type: string
          minLength: 5
          maxLength: 50
          default: bar
  - baseUriTrait:
      description: A description of a trait with base URI parameters
      baseUriParameters:
        communityPath:
          displayName: Community Path trait
          description: The community path base URI trait
          type: string
          example: baz-community
  - protocolTrait:
      description: A trait to assign a protocol
      protocols: ["HTTP"]
  - parameterTrait:
      queryParameters:
        <<tokenName>>:
          description: A valid <<tokenName>> is required
/albums:
  displayName: several-albums
  get:
    description: |
      [Get Several Albums](https://developer.spotify.com/web-api/get-several-albums/)
    headers:
      X-bogus-header:
        description: just an extra header for funsies
    queryParameters:
      ids:
        displayName: Spotify Album IDs
        type: string
        description: A comma-separated list of IDs
        required: true
        example: "382ObEPsp2rxGrnsizN5TX,1A2GTWGtFfWp7KSQTwWOyo,2noRn2Aes5aoNVsU6iWThc"
  /{id}:
    displayName: album
    uriParameters:
      id:
        displayName: Spotify Album ID
        type: string
        description: The Spotify ID for the album
        example: 4aawyAB9vmqN3uQ7FjRGTy
    get:
      type: protocolExampleType
      description: |
        [Get an Album](https://developer.spotify.com/web-api/get-album/)
    /tracks:
      displayName: album-tracks
      type: baseUriType
      get:
        is: [ paged ]
        description: |
          [Get an Album's Tracks](https://developer.spotify.com/web-api/get-albums-tracks/)
/artists:
  displayName: several-artists
  get:
    description: |
      [Get Several Artists](https://developer.spotify.com/web-api/get-several-artists/)
    queryParameters:
      ids:
        displayName: Spotify Artist IDs
        type: string
        description: A comma-separated list of IDs
        required: true
        example: '2CIMQHirSU0MQqyYHq0eOx,57dN52uHvrHOxijzpIgu3E,1vCWHaC5f2uS3yhpwWbIA6'
  /{id}:
    displayName: artist
    uriParameters:
      id:
        displayName: Spotify Artist ID
        type: string
        description: The Spotify ID for the artist
        example: 0TnOYISbd1XYRBk9myaseg
        required: true
    get:
      description: |
        [Get an Artist](https://developer.spotify.com/web-api/get-artist/)
    /top-tracks:
      displayName: artist-top-tracks
      get:
        description: |
          [Get an Artist's Top Tracks](https://developer.spotify.com/web-api/get-artists-top-tracks/)
        queryParameters:
          country:
            displayName: Country
            description: The country (an ISO 3166-1 alpha-2 country code)
            type: string
            example: ES
            required: true
    /related-artists:
      displayName: artist-related-artists
      get:
        description: |
          [Get an Artist's Related Artists](https://developer.spotify.com/web-api/get-related-artists/)
    /albums:
      displayName: artist-albums
      get:
        is: [ paged ]
        description: |
          [Get an Artist's Albums](https://developer.spotify.com/web-api/get-artists-albums/)
        queryParameters:
          album_type:
            displayName: Album Type
            description: Filter by album types
            type: string
            enum: ["single", "album", "appears_on", "compilation"]
            required: false
            example: album
          country:
            displayName: Country
            description: The country (an ISO 3166-1 alpha-2 country code)
            type: string
            example: ES
            required: false
/tracks:
  displayName: several-tracks
  get:
    description: |
      [Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/)
    queryParameters:
      ids:
        displayName: Spotify Track IDs
        type: string
        description: A comma-separated list of IDs
        required: true
        example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
  /{id}:
    displayName: track
    type: baseUriType
    uriParameters:
      id:
        type: string
        displayName: Spotify Track ID
        example: 1zHlj4dQ8ZAtrayhuDDmkY
    get:
      description: |
        [Get a Track](https://developer.spotify.com/web-api/get-track/)
/search:
  displayName: search-item
  get:
    is: [ paged ]
    description: |
      [Search for an Item](https://developer.spotify.com/web-api/search-item/)
    queryParameters:
      q:
        displayName: Query
        type: string
        description: "The search query's keywords (and optional field filters). The search is not case-sensitive: 'roadhouse' will match 'Roadhouse', 'roadHouse', etc. Keywords will be matched in any order unless surrounded by quotes, thus q=roadhouse&20blues will match both 'Blues Roadhouse' and 'Roadhouse of the Blues'. Quotation marks can be used to limit the match to a phrase: q=roadhouse&20blues will match 'My Roadhouse Blues' but not 'Roadhouse of the Blues'. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q=album:gold%20artist:abba&type=album will search for albums with the text 'gold' in the album name and the text 'abba' in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q=damian%20genre:reggae-pop&type=artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string."
        example: Muse
        required: true
      type:
        displayName: Item Type
        description: A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q=name:abacab&type=album,track will return both albums and tracks with "abacab" in their name.
        type: string
        example: artist
        enum: ["album", "artist", "track"]
        required: true
/me:
  displayName: current-user
  securedBy: [ oauth_2_0 ]
  type: queryParamType
  get:
    is: [ protocolTrait ]
    description: |
      [Get Current User's Profile](https://developer.spotify.com/web-api/get-current-users-profile/)
  /tracks:
    displayName: current-user-saved-tracks
    type: collection
    get:
      is: [ paged ]
      description: |
        [Get Current User's Saved Tracks](https://developer.spotify.com/web-api/get-users-saved-tracks/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-read']}]
    put:
      description: |
        [Save Tracks for Current User](https://developer.spotify.com/web-api/save-tracks-user/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-modify']}]
      protocols: ["HTTP"]
      queryParameters:
        ids:
          displayName: Spotify Track IDs
          type: string
          description: A comma-separated list of IDs
          required: true
          example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
    delete:
      description: |
        [Remove Tracks for Current User](https://developer.spotify.com/web-api/remove-tracks-user/)
      securedBy: [ oauth_2_0: {scopes: ['user-library-modify']}]
      queryParameters:
        ids:
          displayName: Spotify Track IDs
          type: string
          description: A comma-separated list of IDs
          required: true
          example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
    /contains:
      displayName: current-user-contains-saved-tracks
      get:
        description: |
          [Check Current User's Saved Tracks](https://developer.spotify.com/web-api/check-users-saved-tracks/)
        securedBy: [ oauth_2_0: {scopes: ['user-library-read']}]
        queryParameters:
          ids:
            displayName: Spotify Track IDs
            type: string
            description: A comma-separated list of IDs
            required: true
            example: '7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B'
/users/{user_id}:
  baseUriParameters:
    subdomain:
      description: a test base URI parameter for resource-level
      default: barFoo
  displayName: users-profile
  protocols: [ "HTTP" ]
  uriParameters:
    user_id:
      displayName: User ID
      type: string
      description: The user's Spotify user ID.
      example: smedjan
  get:
    description: |
      [Get a User's Profile](https://developer.spotify.com/web-api/get-users-profile/)
/users/{user_id}/playlists:
  type: collection
  uriParameters:
    user_id:
      displayName: User ID
      type: string
      description: The user's Spotify user ID.
      example: smedjan
  displayName: playlists
  get:
    is: [ paged ]
    description: |
      [Get a List of a User's Playlists](https://developer.spotify.com/web-api/get-list-users-playlists/)
    securedBy: [ oauth_2_0: {scopes: ['playlist-read-private']}]
    responses:
      200:
        body:
          application/json:
            schema: |
              {
                "$schema": "http://json-schema.org/draft-03/schema",
                "type": "array",
                "items": {
                  "$ref": "schemas/playlist.json"
                }
              }
            #example: !include examples/playlists-get.json
  post:
    description: |
      [Create a Playlist](https://developer.spotify.com/web-api/create-playlist/)
    securedBy: [ oauth_2_0: {scopes: ['playlist-modify-public', 'playlist-modify-private']}]
    body:
      application/json:
        schema: !include includes/post-playlist-schema.json
        example: !include includes/post-playlist-example.json
    responses:
      201:
        headers:
          X-another-bogus-header:
            description: A bogus header
        body:
          application/json:
            schema: Playlist
  /{playlist_id}:
    type: item
    displayName: playlist
    uriParameters:
      playlist_id:
        displayName: Playlist ID
        description: The Spotify playlist ID.
        example: 3dEjWfgB5jC6zn6tLoy9yy
        type: string
        required: true
    get:
      description: |
        [Get a Playlist](https://developer.spotify.com/web-api/get-playlist/)
      securedBy: [ oauth_2_0: { scopes: ['playlist-read-private']}]
      is: [ filterable ]
      responses:
        200:
          body:
            application/json:
              schema: Playlist
    put:
      description: |
        [Change a Playlist's Details](https://developer.spotify.com/web-api/change-playlist-details/)
      securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
      body:
        application/json:
          schema: !include includes/post-playlist-schema.json
          example: !include includes/post-playlist-example.json
    /tracks:
      type: collection
      displayName: playlist-tracks
      get:
        description: |
          [Get a Playlist's Tracks](https://developer.spotify.com/web-api/get-playlists-tracks/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-read-private']}]
        is: [ filterable, paged ]
      post:
        description: |
          [Add Tracks to a Playlist](https://developer.spotify.com/web-api/add-tracks-to-playlist/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
        body:
          application/json:
      put:
        description: |
          [Replace a Playlist's tracks](https://developer.spotify.com/web-api/replace-playlists-tracks/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
        body:
          application/json:
      delete:
        description: |
          [Remove Tracks from a Playlist](https://developer.spotify.com/web-api/remove-tracks-playlist/)
        securedBy: [ oauth_2_0: { scopes: ['playlist-modify-public', 'playlist-modify-private']}]
        body:
          application/json:
/form_parameters:
  description: A example resource with form parameters
  displayName: formParamResource
  post:
    formParameters:
      foo:
        description: Post some foo
        type: string
        required: true
        minLength: 10
        maxLength: 100
      bar:
        description: Post some bar
        type: string
        required: false
        minLength: 15
        maxLength: 150
        default: aPostedBarExample
/no_method_properties:
  /child:
    description: Child of "/no_method_properties"
    get:

