{
  "test_headers": {
    "x-Zencoder-job-metadata-{*}": {
      "description": "Field names prefixed with x-Zencoder-job-metadata- contain user-specified metadata.\nThe API does not validate or use this data. All metadata headers will be stored\nwith the job and returned to the client when this resource is queried.\n",
      "displayName": "Job Metadata"
    },
    "Zencoder-Api-Key": {
      "description": "The API key for your Zencoder account. You can find your API key at\nhttps://app.zencoder.com/api. You can also regenerate your API key on\nthat page.\n",
      "displayName": "ZEncoder API Key",
      "example": "abcdefghijabcdefghijabcdefghij",
      "maxLength": 30,
      "minLength": 30,
      "required": true,
      "type": "string"
    }
  },
  "test_data": [
    {
      "/{id}": {
        "displayName": "track",
        "get": {
          "description": "[Get a Track](https://developer.spotify.com/web-api/get-track/)\n"
        },
        "uriParameters": {
          "id": {
            "displayName": "Spotify Track ID",
            "example": "1zHlj4dQ8ZAtrayhuDDmkY",
            "type": "string"
          }
        }
      },
      "displayName": "several-tracks",
      "get": {
        "description": "[Get Several Tracks](https://developer.spotify.com/web-api/get-several-tracks/)\n",
        "queryParameters": {
          "ids": {
            "description": "A comma-separated list of IDs",
            "displayName": "Spotify Track IDs",
            "example": "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B",
            "required": true,
            "type": "string"
          }
        }
      }
    },
    {
      "displayName": "search-item",
      "get": {
        "description": "[Search for an Item](https://developer.spotify.com/web-api/search-item/)\n",
        "is": [
          "paged"
        ],
        "queryParameters": {
          "q": {
            "description": "The search query's keywords (and optional field filters). The search is not case-sensitive: 'roadhouse' will match 'Roadhouse', 'roadHouse', etc. Keywords will be matched in any order unless surrounded by quotes, thus q=roadhouse&20blues will match both 'Blues Roadhouse' and 'Roadhouse of the Blues'. Quotation marks can be used to limit the match to a phrase: q=roadhouse&20blues will match 'My Roadhouse Blues' but not 'Roadhouse of the Blues'. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q=album:gold%20artist:abba&type=album will search for albums with the text 'gold' in the album name and the text 'abba' in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q=damian%20genre:reggae-pop&type=artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string.",
            "displayName": "Query",
            "example": "Muse",
            "required": true,
            "type": "string"
          },
          "type": {
            "description": "A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q=name:abacab&type=album,track will return both albums and tracks with \"abacab\" in their name.",
            "displayName": "Item Type",
            "enum": [
              "album",
              "artist",
              "track"
            ],
            "example": "artist",
            "required": true,
            "type": "string"
          }
        }
      }
    },
    {
      "displayName": "track",
      "get": {
        "description": "[Get a Track](https://developer.spotify.com/web-api/get-track/)\n"
      },
      "uriParameters": {
        "id": {
          "displayName": "Spotify Track ID",
          "example": "1zHlj4dQ8ZAtrayhuDDmkY",
          "type": "string"
        }
      }
    }
  ],
  "test_mapped_traits": {
    "first": {
      "data": {
        "get": {
          "queryParameters": {
            "digest_all_fields": {
              "description": "If no values match the value given for title, use digest_all_fields instead"
            },
            "title": {
              "description": "Return books that have their title matching the given value"
            }
          }
        }
      },
      "name": "searchableCollection"
    },
    "second": {
      "description": "Get all magazines, optionally filtered",
      "name": "collection",
      "usage": "This resourceType should be used for any collection of items"
    }
  },
  "test_query_params": {
    "q": {
      "description": "The search query's keywords (and optional field filters). The search is not case-sensitive: 'roadhouse' will match 'Roadhouse', 'roadHouse', etc. Keywords will be matched in any order unless surrounded by quotes, thus q=roadhouse&20blues will match both 'Blues Roadhouse' and 'Roadhouse of the Blues'. Quotation marks can be used to limit the match to a phrase: q=roadhouse&20blues will match 'My Roadhouse Blues' but not 'Roadhouse of the Blues'. By default, results are returned when a match is found in any field of the target object type. Searches can be made more specific by specifying an album, artist or track field filter. For example q=album:gold%20artist:abba&type=album will search for albums with the text 'gold' in the album name and the text 'abba' in an artist name. Other possible field filters, depending on object types being searched, include year, genre, upc, and isrc. For example, q=damian%20genre:reggae-pop&type=artist. The asterisk (*) character can, with some limitations, be used as a wildcard (maximum: 2 per query). It will match a variable number of non-white-space characters. It cannot be used in a quoted phrase, in a field filter, or as the first character of the keyword string.",
      "displayName": "Query",
      "example": "Muse",
      "required": true,
      "type": "string"
    },
    "type": {
      "description": "A comma-separated list of item types to search across. Search results will include hits from all the specified item types; for example q=name:abacab&type=album,track will return both albums and tracks with \"abacab\" in their name.",
      "displayName": "Item Type",
      "enum": [
        "album",
        "artist",
        "track"
      ],
      "example": "artist",
      "required": true,
      "type": "string"
    },
    "limit": {
      "displayName": "Limit",
      "description": "The maximum number of track objects to return",
      "type": "integer",
      "example": 10,
      "minimum": 0,
      "default": 20,
      "maximum": 50,
      "required": false
    },
    "offset": {
      "displayName": "Offset",
      "description": "The index of the first track to return",
      "type": "integer",
      "example": 5,
      "default": 0,
      "required": false
    }
  },
  "test_primative_type_integer": {
    "description": "The maximum number of track objects to return",
    "displayName": "Limit",
    "example": 10,
    "minimum": 0,
    "default": 20,
    "maximum": 50,
    "required": false,
    "type": "integer"
  },
  "test_primative_type_number": {
    "description": "Some floating number parameter for the sake of testing.",
    "displayName": "Some Number Parameter",
    "example": 5.4,
    "minimum": 4.3,
    "default": 7.2,
    "maximum": 8.5,
    "required": false,
    "type": "number",
    "repeat": false
  },
  "test_primative_type_boolean": {
    "description": "Some boolean parameter for the sake of testing. I'm not creative.",
    "displayName": "Some Boolean Parameter",
    "default": true,
    "required": false,
    "type": "boolean",
    "repeat": false
  },
  "test_primative_type_date": {
    "description": "Some date parameter for the sake of testing.",
    "displayName": "Some Date Parameter",
    "default": "Sun, 06 Nov 1994 08:49:37 GMT",
    "required": true,
    "type": "date"
  },
  "test_primative_type_file": {
    "description": "Some file parameter for the sake of testing.",
    "displayName": "Some File Parameter",
    "required": false,
    "type": "file",
    "repeat": false
  },
  "test_primative_type_string":{
    "description": "A comma-separated list of IDs",
    "displayName": "Spotify Track IDs",
    "required": true,
    "type": "string",
    "example": "7ouMYWpwJ422jRcDASZB7P,4VqPOruhp5EdPBeR92t6lQ,2takcwOaAZWiXQijPHIx7B"
  },
  "test_applied_security_scheme": {
    "description": "Spotify supports OAuth 2.0 for authenticating all API requests.",
    "type": "OAuth 2.0",
    "describedBy": {
      "queryParameters": {
        "foo": {
          "description": "Foo Query Parameter",
          "type": "string",
          "example": "fooooo"
        }
      },
      "uriParameters": {
        "bar": {
          "description": "Bar URI Parameter",
          "type": "string",
          "example": "baaaar"
        },
        "formParameters": {
          "blarg": {
            "description": "Blarg Form Parameter",
            "type": "string",
            "example": "bllaaaarrgg"
          }
        },
        "headers": {
          "Authorization": {
            "description": "Used to send a valid OAuth 2 access token.",
            "type": "string"
          }
        },
        "settings": {
          "authorizationUri": "https://accounts.spotify.com/authorize",
          "accessTokenUri": "https://accounts.spotify.com/api/token",
          "authorizationGrants": [ "code", "token" ],
          "scopes": ["playlist-read-private", "playlist-modify-public", "playlist-modify-private", "user-library-read", "user-library-modify", "user-read-private", "user-read-emai"]
        }
      }
    }
  }
}
